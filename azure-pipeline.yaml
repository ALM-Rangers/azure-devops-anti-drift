# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Date:yyyy).$(Date:MM).$(Date:dd)$(Rev:.r)

trigger:
- master
- feature/*
- hotfix/*
- bug/*

pr:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: buildConfiguration 
    value: 'Release'
  - group: Antidrift-Build

steps:
- task: replacetokens@3
  inputs:
    rootDirectory: 'src'
    targetFiles: '**/*.runsettings'
    encoding: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    tokenPrefix: '#{'
    tokenSuffix: '}#'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    arguments: --configuration $(buildConfiguration)
    command: build
    workingDirectory: $(Build.SourcesDirectory)/src

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    arguments: '--configuration $(buildConfiguration) -p:Version=$(Build.BuildNumber) --settings $(Build.SourcesDirectory)/src/build.runsettings --collect:"code coverage"'
    workingDirectory: '$(Build.SourcesDirectory)/src'

#- task: BuildQualityChecks@6
#  inputs:
#    checkWarnings: true
#    warningFailOption: 'build'
#    warningFilters: '/\s([1-9]\d*\.?[0]*)\s+Warning\(s\)|\s([1-9]\d*\.?[0]*)\s+Error\(s\)/'
#    showStatistics: true
#    warningTaskFilters: '/^(((android|Xcode|gradlew|dotnet)\s+)?build|ant|maven|cmake|gulp)/i'
#  displayName: 'Build quality check'

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish'
  inputs:
    arguments: --configuration $(buildConfiguration) --output $(Build.ArtifactstagingDirectory) -r rhel.7.4-x64 -p:Version=$(Build.BuildNumber)
    command: publish
    publishWebProjects: false
    zipAfterPublish: false
    workingDirectory: $(Build.SourcesDirectory)/src/drift
    
- task: PublishPipelineArtifact@0
  inputs:
    artifactName: 'drop'
    targetPath: '$(Build.ArtifactstagingDirectory)'